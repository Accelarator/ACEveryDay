#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PI;
typedef pair< PI, int> PII;
const double eps=1e-5;
const double pi=acos(-1.0);
const int mod=1e9+7;
const int INF=0x3f3f3f3f;


int pre[35];
char ss[1010];
	
int fd(int x)
{
	int r=x;
	while(r!=pre[r])
	{
		r=pre[r];
	}
	int i=x,j;
	while(pre[i]!=r)
	{
		j=pre[i];
		pre[i]=r;
		i=j;
	}
	return r;
}

void Union(int a,int b)
{
	int aa=fd(a);
	int bb=fd(b);
	if(aa!=bb){
		pre[aa]=bb;
	}
}

int main()
{
	int in[35];
	int out[35];
	bool vis[35];
	int T,i,x,y,n;
	cin>>T;
	while(T--)
	{
		scanf("%d",&n);
		memset(in,0,sizeof(in));
		memset(out,0,sizeof(out));
		memset(vis,0,sizeof(vis));
		for(i=0;i<26;i++)
			pre[i]=i;
		
		for(i=0;i<n;i++){
			scanf("%s",ss);
			x=ss[0]-'a';
			y=ss[strlen(ss)-1]-'a';
			Union(x,y);
			out[x]++;
			in[y]++;
			vis[x]=vis[y]=1;
		}
		
		int flag=0;
		int ft=0;
		int ed=0;
		int own=0;
		for(i=0;i<26;i++)
		{
			if(vis[i]){
				if(pre[i]==i)
					own++;					
				if(in[i]!=out[i]){
					if(in[i]==out[i]+1)
						ft++;
					else if(in[i]+1==out[i])
						ed++;
					else
						flag=1;
				}
				if(own>1){
					flag=1;
					break;
				}
			}
		}
		if(flag)
			printf("The door cannot be opened.\n"); 
		else if((ft==1&&ed==1)||(ft==0&&ed==0))
			printf("Ordering is possible.\n");
		else
			printf("The door cannot be opened.\n");
	}
	return 0;
}
