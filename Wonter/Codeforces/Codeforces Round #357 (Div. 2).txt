//A - A Good Contest 
#include <bits/stdc++.h>
using namespace std;

int main()
{
    bool flag = false;
    int n;
    cin >> n;
    while(n--)
    {
        string str;
        cin >> str;
        int s, e;
        cin >> s >> e;
        if(s >= 2400 && e > s)
            flag = true;
    }
    if(flag)
        cout << "YES";
    else
        cout << "NO";
    return 0;
}

//B - Economy Game  
#include <bits/stdc++.h>
using namespace std;

typedef __int64 LL;
int main()
{
    LL n;
    cin >> n;
    for(LL a = 0; ;++a)
    {
        if(a * 1234567 > n)
            break;
        for(LL b = 0; ;++b)
        {
            if(a * 1234567 + b * 123456 > n)
                break;
            int t = a * 1234567 + b * 123456;
            if((n - t) % 1234 == 0)
            {
                puts("YES");
                return 0;
            }
        }
    }
    puts("NO");
    return 0;
}

//C - Heap Operations  
#include <bits/stdc++.h>
using namespace std;

typedef pair<char,int> P;
char str[50];
vector<P> ans;
priority_queue<int, vector<int>, greater<int> > que;
int main()
{
    int n;
    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%s", str);
        if(str[0] == 'i')
        {
            int x;
            scanf("%d", &x);
            que.push(x);
            ans.push_back(P('i', x));
        }
        if(str[0] == 'g')
        {
            int x;
            scanf("%d", &x);
            while(que.size() && que.top() < x)
            {
                ans.push_back(P('r', 0));
                que.pop();
            }
            if(que.empty() || que.top() != x)
            {
                que.push(x);
                ans.push_back(P('i', x));
            }
            ans.push_back(P('g', x));
        }
        if(str[0] == 'r')
        {
            if(que.empty())
            {
                que.push(0);
                ans.push_back(P('i', 0));
            }
            ans.push_back(P('r', 0));
            que.pop();
        }
    }
    printf("%d\n", ans.size());
    for(int i = 0; i < ans.size(); ++i)
    {
        if(ans[i].first == 'i')
            printf("insert %d\n", ans[i].second);
        if(ans[i].first == 'r')
            puts("removeMin");
        if(ans[i].first == 'g')
            printf("getMin %d\n", ans[i].second);
    }
    return 0;
}

//D - Gifts by the List  
#include <bits/stdc++.h>
using namespace std;

vector<int> ans;
vector<int> edge[100005];
int a[100005];
int fa[100005];
int TIME[100005], total = 0;
int n, m;
bool flag = true;
void dfs(int cur, int pre)
{
    TIME[cur] = ++total;
    fa[cur] = pre;
    for(int i = 0; i < edge[cur].size(); ++i)
    {
        int next = edge[cur][i];
        dfs(next, cur);
    }
}
void dfs2(int cur)
{
    if(fa[cur] == -1)
        ans.push_back(a[cur]);
    else
    {
        if(TIME[a[cur]] < TIME[ a[fa[cur]] ])
            flag = false;
        if(TIME[a[cur]] > TIME[ a[fa[cur]] ])
        {
            if(TIME[a[cur]] <= TIME[fa[cur]])
                flag = false;
            ans.push_back(a[cur]);
        }
    }
    for(int i = 0; i < edge[cur].size();++i)
        dfs2(edge[cur][i]);
}
void Slove()
{
    for(int i = 1; i <= n; ++i)
        if(fa[i] == -1)
            dfs2(i);
    if(!flag || !n)
    puts("-1");
    else
    {
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        printf("%d\n", ans.size());
        for(int i = ans.size() - 1;i >= 0;--i)
        printf("%d\n", ans[i]);
    }
}
int main()
{
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= m; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v);
        edge[u].push_back(v);
    }
    for(int i = 1; i <= n; ++i)
        scanf("%d", &a[i]);
    for(int i = 1; i <= n; ++i)
    {
        if(!fa[i])
            dfs(i, -1);
    }
    Slove();
    return 0;
}
