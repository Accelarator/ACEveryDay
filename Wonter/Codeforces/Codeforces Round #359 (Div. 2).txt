//A - Free Ice Cream  
#include <bits/stdc++.h>
using namespace std;

int main()
{
    __int64 n, x;
    scanf("%I64d%I64d", &n, &x);
    __int64 ans = 0;
    for(__int64 i = 1;i <= n;++i)
    {
        char ch;
        __int64 b;
        scanf(" %c%I64d", &ch, &b);
        if(ch == '+')
        {
            x += b;
        }
        else
        {
            if(x >= b)
                x -= b;
            else
                ++ans;
        }
    }
    printf("%I64d %I64d\n", x, ans);
    return 0;
}
//B - Little Robber Girl's Zoo  
#include <bits/stdc++.h>
using namespace std;

int arr[100];
vector<int> ans;
int main()
{
    int n;
    scanf("%d", &n);
    for(int i = 1;i <= n;++i)
        scanf("%d", &arr[i]);
    while(true)
    {
        bool flag = false;
        for(int i = 1;i <= n - 1;++i)
        {
            if(arr[i] > arr[i + 1])
            {
                printf("%d %d\n", i, i + 1);
                swap(arr[i], arr[i + 1]);
                flag = true;
            }
        }
        if(!flag)
            break;
    }
    return 0;
}
//C - Robbers' watch  
#include <bits/stdc++.h>
using namespace std;

__int64 ln, lm;
__int64 n, m;
__int64 ans;
__int64 tmp;
bool vis[10];
void dfsm(__int64 pos, __int64 cur)
{
    if(cur > m)
        return ;
    if(pos == lm)
    {
        ++tmp;
        return ;
    }
    for(__int64 i = 0;i < 7;++i)
    {
        if(!vis[i])
        {
            vis[i] = true;
            dfsm(pos + 1, cur * 7 + i);
            vis[i] = false;
        }
    }
}
void dfsn(__int64 pos, __int64 cur)
{
    if(cur > n)
        return ;
    if(pos == ln)
    {
        tmp = 0;
        dfsm(0, 0);
        ans += tmp;
        return ;
    }
    for(__int64 i = 0;i < 7;++i)
    {
        if(!vis[i])
        {
            vis[i] = true;
            dfsn(pos + 1, cur * 7 + i);
            vis[i] = false;
        }
    }
}
int main()
{
    scanf("%I64d%I64d", &n, &m);
    --n;
    --m;
    __int64 t;
    t = n;
    ln = 0;
    if(t == 0)
        ln = 1;
    while(t)
    {
        ++ln;
        t /= 7;
    }
    t = m;
    lm = 0;
    if(t == 0)
        lm = 1;
    while(t)
    {
        ++lm;
        t /= 7;
    }
    ans = 0;
    dfsn(0, 0);
    printf("%I64d\n", ans);
    return 0;
}
